#################################################
##  Netfilter Iptables Macros
#################################################

# Datasource of Iptables Events

[iptables_datasource]
definition = index=iptables_index (sourcetype=syslog OR sourcetype=iptables_source)
iseval = 0


# Accepted Traffic - Patterns used to filter allowed traffic

[traffic_accepted]
definition = ( *ACCEPT*  OR *ALLOW* )
iseval = 0

[traffic_denied]
definition = ( *DROP* OR *BLOCK* OR *REJECT* )
iseval = 0

# Some filter for traffic pollution

[filter_badclients]
definition = ( clientip!="0.0.0.0" OR "255.255.255.255" )
iseval = 0

#########################################
#	Custom Span Macro Definition
#########################################

#################
# data interval #
#################

# Use These custom span macros if your minimal interval data >=1mn
# JScharting is limited to 1000 points, so this is a method to be as closed as possible to this limit

[inline_customspan]
definition = [ search index=iptables_index | head 1 | addinfo\
| eval earliest=if(info_min_time == "0.000", info_search_time,info_min_time)\
| eval latest=if(info_max_time == "+Infinity", info_search_time,info_max_time)\
| eval searchStartTIme=strftime(earliest,"%a %d %B %Y %H:%M")\
| eval searchEndTime=strftime(latest,"%a %d %B %Y %H:%M")\
| eval Difference = (latest - earliest)\
| eval span=case(\
info_min_time == "0.000", "2m",\
Difference > (3000*24*60*60),"4d",\
Difference > (2000*24*60*60),"3d",\
Difference > (1000*24*60*60),"2d",\
Difference > (500*24*60*60),"1d",\
Difference > (333*24*60*60),"12h",\
Difference > (166*24*60*60),"8h",\
Difference > (83*24*60*60),"4h",\
Difference > (41*24*60*60),"2h",\
Difference > (916*60*60),"1h",\
Difference > (833*60*60),"55m",\
Difference > (750*60*60),"50m",\
Difference > (666*60*60),"45m",\
Difference > (583*60*60),"40m",\
Difference > (500*60*60),"35m",\
Difference > (416*60*60),"30m",\
Difference > (333*60*60),"25m",\
Difference > (250*60*60),"20m",\
Difference > (166*60*60),"15m",\
Difference > (83*60*60),"10m",\
Difference > (66*60*60),"5m",\
Difference > (50*60*60),"4m",\
Difference > (33*60*60),"3m",\
Difference > (16*60*60),"2m",\
Difference > (8*60*60),"1m",\
Difference > (2*60*60),"30s",\
Difference <= (2*60*60),"10s"\
)\
| return span ]
iseval = 0

# Inline version used in django views

[inline_customspan_django]
definition = head 1 | addinfo\
| eval earliest=if(info_min_time == "0.000", info_search_time,info_min_time)\
| eval latest=if(info_max_time == "+Infinity", info_search_time,info_max_time)\
| eval searchStartTIme=strftime(earliest,"%a %d %B %Y %H:%M")\
| eval searchEndTime=strftime(latest,"%a %d %B %Y %H:%M")\
| eval Difference = (latest - earliest)\
| eval span=case(\
info_min_time == "0.000", "2m",\
Difference > (3000*24*60*60),"4d",\
Difference > (2000*24*60*60),"3d",\
Difference > (1000*24*60*60),"2d",\
Difference > (500*24*60*60),"1d",\
Difference > (333*24*60*60),"12h",\
Difference > (166*24*60*60),"8h",\
Difference > (83*24*60*60),"4h",\
Difference > (41*24*60*60),"2h",\
Difference > (916*60*60),"1h",\
Difference > (833*60*60),"55m",\
Difference > (750*60*60),"50m",\
Difference > (666*60*60),"45m",\
Difference > (583*60*60),"40m",\
Difference > (500*60*60),"35m",\
Difference > (416*60*60),"30m",\
Difference > (333*60*60),"25m",\
Difference > (250*60*60),"20m",\
Difference > (166*60*60),"15m",\
Difference > (83*60*60),"10m",\
Difference > (66*60*60),"5m",\
Difference > (50*60*60),"4m",\
Difference > (33*60*60),"3m",\
Difference > (16*60*60),"2m",\
Difference > (8*60*60),"1m",\
Difference > (2*60*60),"30s",\
Difference <= (2*60*60),"10s"\
)
iseval = 0


###############################################
#	Macro used in Compare interface
###############################################

[eval_compare]
definition = eval Evolution_usage=((usage_period2-usage_period1)/usage_period1)*100 | eval Evolution_usage=round(Evolution_usage,2)\
| eval Delta_usage=round((usage_period2-usage_period1),2)\
| eval Evolution_pct_usage=case(isnotnull(pct_usage_period1), ((pct_usage_period2-pct_usage_period1)/pct_usage_period1)*100 ) | eval Evolution_pct_usage=round(Evolution_pct_usage,2)\
| eval Delta_pct_usage=round((pct_usage_period2-pct_usage_period1),2)\
| fields hostname,usage_period1,usage_period2,Delta_usage,Evolution_usage,*\
| rename Evolution_usage As "Evolution_usage (%)"\
| rename Evolution_pct_usage As "Evolution_pct_usage (%)"\
| eval usage_period1=round(usage_period1,2)\
| eval usage_period2=round(usage_period2,2)
iseval = 0


###################################
# 	Index Datestate
###################################

[indexes_datestats]

definition = metadata type=sourcetypes index="iptables_index" | setfields index="iptables_index" | eval "First Event"=strftime(firstTime,"%d/%m/%Y %H:%M") | eval "Last Event"=strftime(lastTime,"%d/%m/%Y %H:%M") | fields index,sourcetype,*Event
iseval = 0

#####################
#	FILTER TIME		#
#####################

[No_Filter]
definition = eval local_time=strftime(_time, "%H:%M")
iseval = 0

[Day_BusinessDays_8h-19h]
definition = eval local_time=strftime(_time, "%H:%M") | search (local_time>="08:00" AND local_time<="19:00") AND (date_wday!="sunday" date_wday!="saturday")
iseval = 0

[Day_WeekEnd_8h-19h]
definition = eval local_time=strftime(_time, "%H:%M") | search (local_time>="08:00" AND local_time<="19:00") AND (date_wday="sunday" OR date_wday="saturday")
iseval = 0

[Day_AllDays_8h-19h]
definition = eval local_time=strftime(_time, "%H:%M") | search (local_time>="08:00" AND local_time<="19:00")
iseval = 0

[Night_BusinessDays_19h-8h]
definition = eval local_time=strftime(_time, "%H:%M") | search (local_time>="19:00" AND local_time<="23:59") OR (local_time>="00:00" AND local_time<="08:00") AND (date_wday!="sunday" date_wday!="saturday")
iseval = 0

[Night_WeekEnd_19h-8h]
definition = eval local_time=strftime(_time, "%H:%M") | search (local_time>="19:00" AND local_time<="23:59") OR (local_time>="00:00" AND local_time<="08:00") AND (date_wday="sunday" OR date_wday="saturday")
iseval = 0

[Night_AllDays_19h-8h]
definition = eval local_time=strftime(_time, "%H:%M") | search (local_time>="19:00" AND local_time<="23:59") OR (local_time>="00:00" AND local_time<="08:00")
iseval = 0
